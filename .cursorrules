# Proje Amacı: Banka ekstre SMS ve E-postalarını okuyup, son ödeme tarihlerini ve kredi ilk ödeme tarihlerini listeleyen React Native/Capacitor Android uygulaması.

# --- Genel Kurallar ---

# Yoksayılacak Dizinler/Dosyalar (Performans ve Alaka Düzeyi için)
ignore:
  - node_modules/
  - android/build/
  - android/app/build/
  - ios/Pods/
  - ios/build/
  - www/
  - dist/
  - .gradle/
  - .idea/
  - *.log
  - coverage/
  - android/app/src/test/ # Test dosyaları genellikle bağlam için gerekli değil

# --- Bağlam Öncelikleri ---

# Öncelikli Dizinler (Bu dizinlerdeki dosyalara daha fazla ağırlık ver)
priority_dirs:
  - src/
  - src/pages/
  - src/store/
  - src/services/
  - src/components/
  - android/app/src/main/java/com/codeyzer/ekstre/ # Native plugin kodları

# Anahtar Dosyalar (Bu dosyalar genellikle önemlidir)
key_files:
  - src/App.tsx
  - src/store/index.ts
  - src/store/slices/authSlice.ts
  - src/store/slices/permissionSlice.ts
  - src/store/slices/dataSlice.ts
  - src/store/slices/loadingSlice.ts
  - src/services/gmail.service.ts
  - src/services/calendar.service.ts
  - src/services/sms-parsing/sms-processor.ts
  - src/services/email-parsing/parsers/isbank-email-parser.ts # Yeni eklenen PDF parser
  - src/pages/LoginPage.tsx
  - src/pages/AccountTab.tsx
  - src/pages/ManualEntryTab.tsx
  - src/pages/SettingsTab.tsx
  - src/types/manual-entry.types.ts
  - capacitor.config.ts
  - package.json
  - .cursorrules
  - src/utils/parsing.ts
  - android/app/src/main/java/com/codeyzer/ekstre/PdfParserPlugin.java # Yeni eklenen native plugin
  - android/app/build.gradle # Native bağımlılıklar için önemli

# Dil/Framework Bilgisi (AI'nın doğru araçları kullanmasına yardımcı olur)
language: typescript
framework: react
platform: capacitor

# --- Mevcut Durum ve Yapılanlar (React Native / Capacitor Projesi) ---

# 1. Temel Kurulum ve Platform:
#    - Capacitor kullanılarak React (TypeScript) ile mobil uygulama geliştirildi.
#    - Android platformu hedeflendi.

# 2. İzin Yönetimi:
#    - Android için SMS okuma izni istendi ve yönetildi (`@plugins/sms-reader`).
#    - İzin kontrolü ve isteme arayüzü `SettingsTab.tsx` içine taşındı.

# 3. Google Entegrasyonu:
#    - Google ile OAuth 2.0 girişi yapıldı (`@plugins/google-auth`). Giriş işlemi `LoginPage.tsx` sayfasına taşındı.
#    - Başarılı giriş sonrası `accessToken` ve `idToken` alınıp Redux state\'inde (`authSlice`) saklanıyor.
#    - Gmail API kullanılarak e-postaları okuma izni alındı (sadece okuma).
#    - `gmail.service.ts` ile Gmail API işlemleri (arama, detay alma, içerik çözme, **ek alma**) yönetildi.
#        - `decodeEmailBody`: E-posta içeriğini `Content-Type` başlığındaki `charset`\'e göre çözer.
#        - **`getAttachment`**: E-posta eklerini almak için kullanılır.
#            - Başlangıçta `CapacitorHttp` kullanıldı ancak büyük eklerde veri kesilmesi sorunu yaşandı.
#            - **Standart `fetch` API\'si (veya `fetchWithAuth` yardımcısı) kullanılarak bu sorun aşıldı.**
#            - Gmail API\'den gelen ek verisi **Base64URL** formatındadır. Bu veri, native PDF parser\'a gönderilmeden önce TypeScript tarafında standart Base64 formatına (padding dahil) çevrilir (`isbank-email-parser.ts` içinde).
#            - API çağrıları için gerekli token (`accessToken`) Redux store'dan (`state.auth.accessToken`) istek anında alınır.
#    - **`apiClient.ts` (`fetchWithAuth`)**:
#        - Tüm yetkilendirilmiş API istekleri için merkezi bir yardımcıdır.
#        - Otomatik olarak `Authorization: Bearer <token>` başlığını ekler.
#        - **Gelişmiş Token Yenileme:** 401 Unauthorized hatası alındığında `GoogleAuth.trySilentSignIn` ile token'ı yenilemeye çalışır.
#            - Yenileme başarılı olursa, hem 401 alan orijinal isteği hem de o sırada bekleyen (kuyruktaki) diğer istekleri yeni token ile otomatik olarak tekrar dener.
#            - Yenileme başarısız olursa (örneğin `SIGN_IN_REQUIRED`), kullanıcıyı bilgilendirir ve çıkış yaptırır.
#            - **Yan Etki Düzeltmesi:** İstek seçenekleri (`options`) her `fetch` çağrısından önce klonlanır. Bu, token yenileme sırasında veya testlerde nesne referanslarının beklenmedik şekilde değiştirilmesini önler.
#    - Google Calendar API entegrasyonu (`calendar.service.ts`).
#        - **AppID Sistemi:** Takvim etkinliklerini tanımlamak için kullanılır (`src/utils/identifiers.ts`).
#        - `createEvent` ve `searchEvents` (AppID ile) metodları.

# 4. Veri Ayrıştırma (Parsing):
#    - **SMS:**
#        - Native SMS okuyucu eklentisi (`SmsReaderPlugin.java`) ile native filtreleme.
#        - `sms-processor.ts` ile banka bazlı SMS işleme (`fetchAndParseStatements`, `fetchAndParseLoans`).
#        - QNB, Garanti için SMS parser\'ları (`qnb-parser.ts`, `garanti-parser.ts`).
#    - **E-posta:**
#        - Yapı Kredi, Ziraat için HTML içerik parser\'ları (`yapikredi-email-parser.ts`, `ziraat-email-parser.ts`).
#        - **İş Bankası için PDF Ek Parser\'ı (`isbank-email-parser.ts`):**
#            - E-postada PDF eki olup olmadığını kontrol eder.
#            - `gmail.service.ts` kullanarak eki Base64URL olarak alır, standart Base64\'e çevirir.
#            - **Native PDF Parser Eklentisi (`PdfParserPlugin.java`)**\'nı çağırır.
#            - **Native Plugin:**
#                - Android uyumlu **`com.tom-roush:pdfbox-android`** kütüphanesini kullanır (`android/app/build.gradle` içinde bağımlılık olarak eklenmiştir). Standart `org.apache.pdfbox` Android\'de çalışmaz (`java.awt` bağımlılığı).
#                - **Önemli:** Plugin\'in düzgün çalışması için, plugin kodunda (`PdfParserPlugin.java`) `onCreate` veya metot çağrılmadan önce **`PDFBoxResourceLoader.init(getContext());`** çağrısı yapılmalıdır. Bu, `glyphlist.txt` gibi gerekli kaynak dosyalarının yüklenmesini sağlar. Aksi takdirde `GlyphList ... not found` hatası alınır.
#                - Kod küçültme (ProGuard/R8) aktifse, `pdfbox-android` ve kaynak dosyalarının korunması için `proguard-rules.pro` dosyasına `-keep` kuralları eklenmelidir.
#            - Native plugin\'den dönen metin içinde "Son Ödeme Tarihi" ve "Hesap Özeti Borcu" regex ile aranır ve veriler ayrıştırılır (`parseExtractedPdfText` fonksiyonu).
#            - **API Veri Sorunları:** Gmail API\'den alınan Base64 verisinin **bazen bozuk veya eksik olabileceği** tespit edildi (örn. Base64 padding hatası, PDF trailer hatası). Bu durumlar `try-catch` ile yakalanır, hata loglanır ve ilgili e-posta atlanır (`null` döndürülür). Bozuk veriyi düzeltmek mümkün değildir.
#    - `sms-processor.ts` içinde `statementProcessor` sınıfı ile tüm veriler merkezi olarak işlenir.
#    - Banka bazlı yapılandırmalar (`availableBankProcessors`).

# 5. State Yönetimi (Redux):
#    - Oturum (`accessToken`, `idToken`), izinler, ayrıştırılmış veriler yönetilir.
#    - `redux-persist` ile state kalıcılığı (`authSlice`, `permissionSlice`, `dataSlice`).
#    - `dataSlice` manuel kayıtları da tutar (`ManualEntry` tipi, `addManualEntry`, `deleteManualEntry`